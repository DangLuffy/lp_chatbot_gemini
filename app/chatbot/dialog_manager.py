# /app/chatbot/dialog_manager.py

import logging
from typing import Dict, Any, List

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
from .nlp import extract_lp_from_text
from app.solver.dispatcher import dispatch_solver

logger = logging.getLogger(__name__)

# Qu·∫£n l√Ω tr·∫°ng th√°i h·ªôi tho·∫°i cho m·ªói ng∆∞·ªùi d√πng (n·∫øu c·∫ßn)
# Key: user_id, Value: conversation_state
# Trong v√≠ d·ª• ƒë∆°n gi·∫£n n√†y, ch√∫ng ta kh√¥ng l∆∞u tr·∫°ng th√°i ph·ª©c t·∫°p.
conversation_states: Dict[str, Any] = {}

class DialogManager:
    """
    Qu·∫£n l√Ω logic h·ªôi tho·∫°i c·ªßa chatbot.
    """
    def __init__(self, user_id: str = "default_user"):
        self.user_id = user_id
        # Kh·ªüi t·∫°o tr·∫°ng th√°i n·∫øu ng∆∞·ªùi d√πng ch∆∞a c√≥
        if self.user_id not in conversation_states:
            conversation_states[self.user_id] = {"history": []}
        
        self.state = conversation_states[self.user_id]
        self.logs = []

    def _log(self, message: str):
        self.logs.append(message)
        logger.info(message)

    def handle_message(self, user_message: str) -> str:
        """
        X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi c·ªßa bot.
        """
        self._log(f"Handling message from user '{self.user_id}': '{user_message}'")
        self.state["history"].append({"user": user_message})

        # B∆∞·ªõc 1: C·ªë g·∫Øng ph√¢n t√≠ch to√†n b·ªô tin nh·∫Øn nh∆∞ m·ªôt b√†i to√°n LP
        problem_data, nlp_logs = extract_lp_from_text(user_message)
        self.logs.extend(nlp_logs)

        if not problem_data:
            # N·∫øu ph√¢n t√≠ch th·∫•t b·∫°i, tr·∫£ v·ªÅ th√¥ng b√°o h∆∞·ªõng d·∫´n
            self._log("NLP parsing failed. Replying with a help message.")
            response = "T√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng nh·∫≠p b√†i to√°n theo ƒë·ªãnh d·∫°ng, v√≠ d·ª•:\n" \
                       "'Maximize 3x1 + 2x2 subject to x1+x2<=10, 2x1+x2<=15'"
            self.state["history"].append({"bot": response})
            return response

        # B∆∞·ªõc 2: N·∫øu ph√¢n t√≠ch th√†nh c√¥ng, g·ªçi b·ªô gi·∫£i
        self._log(f"NLP parsing successful. Dispatching to solver.")
        # M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng pulp_cbc, c√≥ th·ªÉ cho ph√©p ng∆∞·ªùi d√πng ch·ªçn sau n√†y
        solution, solver_logs = dispatch_solver(problem_data, solver_name="pulp_cbc")
        self.logs.extend(solver_logs)
        
        # B∆∞·ªõc 3: ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ƒë·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng
        response = self._format_solution_response(solution, problem_data)
        self._log(f"Formatted response: {response}")
        self.state["history"].append({"bot": response})
        
        return response

    def _format_solution_response(self, solution: Dict[str, Any], problem: Dict[str, Any]) -> str:
        """
        Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ t·ª´ b·ªô gi·∫£i th√†nh m·ªôt chu·ªói vƒÉn b·∫£n th√¢n thi·ªán.
        """
        if not solution:
            return "R·∫•t ti·∫øc, ƒë√£ x·∫£y ra l·ªói trong qu√° tr√¨nh gi·∫£i b√†i to√°n."

        status = solution.get("status", "Unknown")
        
        if status == "Optimal":
            obj_value = solution.get("objective_value", 0)
            variables = solution.get("variables", {})
            
            response_parts = [
                f"üéâ L·ªùi gi·∫£i t·ªëi ∆∞u ƒë√£ ƒë∆∞·ª£c t√¨m th·∫•y!",
                f"Gi√° tr·ªã h√†m m·ª•c ti√™u ({problem['objective']['type']}): {obj_value:.4g}",
                "Gi√° tr·ªã c·ªßa c√°c bi·∫øn:"
            ]
            for var, val in variables.items():
                response_parts.append(f"  - {var} = {val:.4g}")
            
            return "\n".join(response_parts)
        
        elif status == "Infeasible":
            return "B√†i to√°n kh√¥ng c√≥ l·ªùi gi·∫£i kh·∫£ thi (c√°c r√†ng bu·ªôc m√¢u thu·∫´n v·ªõi nhau)."
            
        elif status == "Unbounded":
            return "B√†i to√°n kh√¥ng b·ªã ch·∫∑n (gi√° tr·ªã h√†m m·ª•c ti√™u c√≥ th·ªÉ ti·∫øn t·ªõi v√¥ c√πng)."
        
        else:
            return f"Kh√¥ng th·ªÉ t√¨m th·∫•y l·ªùi gi·∫£i t·ªëi ∆∞u. Tr·∫°ng th√°i c·ªßa b·ªô gi·∫£i l√†: {status}."

    def get_logs(self) -> List[str]:
        """Tr·∫£ v·ªÅ to√†n b·ªô logs c·ªßa qu√° tr√¨nh x·ª≠ l√Ω."""
        return self.logs
